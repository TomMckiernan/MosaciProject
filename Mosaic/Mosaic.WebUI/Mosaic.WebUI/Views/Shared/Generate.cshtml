@model Mosaic.WebUI.Models.GenerateMosaicModel

@{
    ViewData["Title"] = "Generate";
}
@Html.Partial("_ProjectNavBar", Model.PartialModel)

<div class="jumbotron jumbotron-with-navbar">
    <h1 class="display-4">Generate Mosaic Image</h1>
    <hr class="my-4">
    <p>Generate the mosaic image from your master and tile images</p>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <div id="image-container" class="media">
                @Html.Partial("_TileImage")
            </div>
        </div>
        <div class="col-md-6">
            <div class="container options-container row">
                <h3>
                    Select Tile Size
                </h3>
                <div class="row tile-size-row">
                    <div class="select-tile-size btn-group">
                        <button type="button" class="btn btn-primary tile-size-button">Action</button>
                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu">
                            <li class="option-1">10</li>
                            <li class="option-2">20</li>
                            <li class="option-3">30</li>
                            <li class="option-4">40</li>
                            <li class="option-5">50</li>
                            <li class="option-6">60</li>
                        </ul>
                    </div>
                </div>
                <h3>
                    View Images
                </h3>
                <button id="view_master" type="button" class="btn btn-primary">
                    View Master
                </button>
                <button id="view_mosaic" type="button" class="btn btn-primary">
                    View Mosaic
                </button>
                <button id="view_edges" type="button" class="btn btn-primary">
                    View Edges
                </button>
                <button id="toggle_grid" type="button" class="btn btn-primary">
                    Toggle Grid
                </button>
                <!-- Rounded switch -->
                <h3>
                    Colour Blended Generation
                </h3>
                <label class="switch">
                    <input id="colour_blended" type="checkbox">
                    <span class="slider round"></span>
                </label>
            </div>
            <div class="container options-container generate-container row">
                <h3>
                    Enhanced Generation
                </h3>
                <label class="switch pad-bottem">
                    <input id="enhanced_mosaic" type="checkbox">
                    <span class="slider round"></span>
                </label>
                <div class="slidecontainer pad-bottem">
                    <input type="range" min="1" max="100" value="50" class="range" id="enhanced_threshold">
                </div>
            </div>
            <div class="container options-container generate-container row">
                <h3>
                    Edge Detection
                </h3>
                <label class="switch pad-bottem">
                    <input id="edge_detection" type="checkbox">
                    <span class="slider round"></span>
                </label>
                <button id="preview_edges" type="button" class="btn btn-primary btn-float-right">
                    Preview
                </button>
                <div class="slidecontainer pad-bottem">
                    <input type="range" min="1" max="255" value="128" class="range" id="edge_threshold">
                </div>
            </div>
            <div class="container options-container generate-container row">
                <button id="generate_mosaic" type="button" class="btn btn-primary btn-pad">
                    Generate
                </button>
                <button id="generate_random_mosaic" type="button" class="btn btn-primary btn-pad">
                    Randomise
                </button>
            </div>

            <div class="container options-container generate-container row">
                <h3>
                    <span style="color:#d34615; font-size:2em;">@Model.TileImageCount</span>
                    Tile images added
                </h3>
                <h3>
                    <span id="library_suitability" style="color:#d34615; font-size:2em;">@Model.ColoursModel.LibrarySuitability.ToString()%</span>
                    match between colours found in master image and the colours found in tile images
                </h3>

                @Html.Partial("_PieChart", Model)
            </div>
            <h3>
                Select missing colours
            </h3>

        </div>
    </div>
    <div class="row">
        <div class="col-md-12">

        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
<script>
    $(function () {
        var generateMosaic = function (id, random, tileWidth, tileHeight, colourBlended, enhanced, edgeDetection, edgeDetectionThreshold) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("GenerateMosaic", "Generate")',
                dataType: 'json',
                cache: false,
                data: {
                    id: id, random: random, tileWidth: tileWidth, tileHeight: tileHeight, colourBlended: colourBlended,
                    enhanced: enhanced, edgeDetection: edgeDetection, edgeDetectionThreshold, edgeDetectionThreshold
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Invalid request");
                },
                success: function (response) {
                    im.src = response + "?rnd=" + Math.random();
                    newMosaicLocation = response;
                },
                complete: function () {
                    enableButtons();
                    $('#view_mosaic').attr("disabled", false);
                }
            });
        }

        var previewEdges = function (id, threshold) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("PreviewEdges", "Generate")',
                dataType: 'json',
                cache: false,
                data: { id: id, threshold: threshold },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Invalid request");
                },
                success: function (response) {
                    im.src = response + "?rnd=" + Math.random();
                },
                complete: function () {
                    enableButtons();
                    $('#view_edges').attr("disabled", false);
                }
            });
        }

        var initialiseTileSize = function () {
            var firstOption = $('.dropdown-menu li:nth(3)')[0];
            var tileSizeButton = $(".tile-size-button");
            $(tileSizeButton).text("Tile Size : " + $(firstOption).text());
            $(tileSizeButton).val($(firstOption).text());
            setSeparation(parseInt($(firstOption).text()));
        }

        $("#generate_mosaic").click(function () {
            $(this).attr("disabled", true);
            $('#generate_random_mosaic').attr("disabled", true);
            $('#preview_edges').attr("disabled", true);
            var gridSize = getSeparation();
            var colourBlended = getColourBlended();
            var enhanced = getEnhanced(true);
            var edgeDetection = getEdgeDetection(true);
            var edgeDetectionThreshold = getEdgeDetectionThreshold();
            generateMosaic("@Model.ProjectId", false, gridSize, gridSize, colourBlended, enhanced, edgeDetection, edgeDetectionThreshold);
        });

        $("#generate_random_mosaic").click(function () {
            $(this).attr("disabled", true);
            $('#generate_mosaic').attr("disabled", true);
            $('#preview_edges').attr("disabled", true);
            var gridSize = getSeparation();
            var colourBlended = getColourBlended();
            var enhanced = getEnhanced(true);
            var edgeDetection = getEdgeDetection(true);
            var edgeDetectionThreshold = getEdgeDetectionThreshold();
            generateMosaic("@Model.ProjectId", true, gridSize, gridSize, colourBlended, enhanced, edgeDetection, edgeDetectionThreshold);
        });

        $("#preview_edges").click(function () {
            $(this).attr("disabled", true);
            $('#generate_mosaic').attr("disabled", true);
            $('#generate_random_mosaic').attr("disabled", true);
            // Ensure value is limited between 1 and 255
            var threshold = getEdgeDetectionThreshold();
            var limitedThreshold = Math.min(Math.max(parseInt(threshold), 1), 255);
            previewEdges("@Model.ProjectId", limitedThreshold);
        });

        var getColourBlended = function () {
            var colourBlendedToggle = $('#colour_blended');
            var colourBlendedGeneration = false;
            if (colourBlendedToggle.is(":checked")) {
                colourBlendedGeneration = true;
            }
            colourBlendedToggle.attr("disabled", true);
            return colourBlendedGeneration;
        }

        // Gets state of enhanced generation toggle
        var getEnhanced = function (disable) {
            var enhancedToggle = $('#enhanced_mosaic');
            var enhancedGeneration = false;
            if (enhancedToggle.is(":checked")) {
                enhancedGeneration = true;
            }
            if (disable) {
                enhancedToggle.attr("disabled", true);
            }
            return enhancedGeneration;
        }

        // Gets state of edge detection toggle
        var getEdgeDetection = function (disable) {
            var enhancedToggle = $('#edge_detection');
            var enhancedGeneration = false;
            if (enhancedToggle.is(":checked")) {
                enhancedGeneration = true;
            }
            if (disable) {
                enhancedToggle.attr("disabled", true);
            }
            return enhancedGeneration;
        }

        // Gets value of edge detection threshold slider
        var getEdgeDetectionThreshold = function () {
            return $('#edge_threshold').val();
        }

        var enableButtons = function () {
            $('#generate_mosaic').attr("disabled", false);
            $('#generate_random_mosaic').attr("disabled", false);
            $('#colour_blended').attr("disabled", false);
            $('#enhanced_mosaic').attr("disabled", false);
            $('#edge_detection').attr("disabled", false);
            $('#preview_edges').attr("disabled", false);
        }

        $("#view_master").click(function () {
            im.src = "@Model.JSMasterLocation" + "?rnd=" + Math.random();
        });

        $("#view_mosaic").click(function () {
            im.src = "@Model.JSMosaicLocation" + "?rnd=" + Math.random();
        });

        $("#view_edges").click(function () {
            im.src = "@Model.JSEdgeLocation" + "?rnd=" + Math.random();
        });

        $("#toggle_grid").click(function () {
            toggleGrid();
        });

        $(window).resize(function () {
            drawResize();
        });

        $(".dropdown-menu").on('click', 'li', function () {
            $(".tile-size-button:first-child").text("Tile Size : " + $(this).text());
            $(".tile-size-button:first-child").val($(this).text());      
            setSeparation(parseInt($(this).text()));
            drawResize();
            var size = parseInt($(this).text());
            $.event.trigger({
                type: "customChartRedraw",
                size: size
            });
        });

        $("#edge_detection").click(function () {
            if (getEnhanced(false)) {
                $('#enhanced_mosaic').prop("checked", false);
            }
        });

        $("#enhanced_mosaic").click(function () {
            if (getEdgeDetection(false)) {
                $('#edge_detection').prop("checked", false);
            }
        });
        
        $(document).on("customLibrarySuitability", function (evt) {
            evt.preventDefault();
            $("#library_suitability").text(evt.suitability + "%");
        });

        if ("@Model.State" == "@ProjectStructure.Types.State.Completed") {
            im.src = "@Model.JSMosaicLocation" + "?rnd=" + Math.random();
        }
        else {
            im.src = "@Model.JSMasterLocation" + "?rnd=" + Math.random();
            $('#view_mosaic').attr("disabled", true)
        }

        if ("@Model.EdgeLocation" == "") {
            $('#view_edges').attr("disabled", true)
        }

        var newMosaicLocation = "";
        initialiseTileSize();
    });

</script>
