@model Mosaic.WebUI.Models.GenerateMosaicModel

@{
    ViewData["Title"] = "Generate";
}
@Html.Partial("_ProjectNavBar", Model.PartialModel)

<div class="jumbotron jumbotron-with-navbar">
    <h1 class="display-4">Generate Mosaic Image</h1>
    <hr class="my-4">
    <p>Generate the mosaic image from your master and tile images</p>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <div id="image-container" class="media">
                @Html.Partial("_TileImage")
            </div>
        </div>
        <div class="col-md-6">
            <div class="row tile-size-row">
                <div class="select-tile-size btn-group">
                    <button type="button" class="btn btn-primary tile-size-button">Action</button>
                    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="caret"></span>
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li class="option-1">10</li>
                        <li class="option-2">20</li>
                        <li class="option-3">30</li>
                        <li class="option-4">40</li>
                    </ul>
                </div>
            </div>

            <button id="view_master" type="button" class="btn btn-primary">
                View Master
            </button>
            <button id="view_mosaic" type="button" class="btn btn-primary">
                View Mosaic
            </button>
            <button id="toggle_grid" type="button" class="btn btn-primary">
                Toggle Grid
            </button>
            <h3>
                <span style="color:#d34615; font-size:2em;">@Model.TileImageCount</span>
                Tile images added
            </h3>
            <h3>
                <span style="color:#d34615; font-size:2em;">@Model.ColoursModel.LibrarySuitability.ToString()%</span>
                match between colours found in master image and the colours found in tile images
            </h3>
            <button id="generate_mosaic" type="button" class="btn btn-primary">
                Generate
            </button>
            <button id="generate_random_mosaic" type="button" class="btn btn-primary">
                Randomise
            </button>
            <ul>
                <li>Watch how to get the best result</li>
                <li>Add pictures with colors similar to the colors found in your master image.
                <li>Tile Images which match the colours will be displayed, future feature will include randomness</li>
                <li>If the mosaic image generated is not to your liking you can go back and adjust your tile library</li>
                <li>Check to make sure the square auto crop looks good. If not, click it to crop and rotate manually.</li>
            </ul>

            <!-- Rounded switch -->
            <h3>
                Colour Blended Generation
            </h3>
            <label class="switch">
                <input id="colour_blended" type="checkbox">
                <span class="slider round"></span>
            </label>

            @Html.Partial("_PieChart", Model)

        </div>
    </div>
    <div class="row">
        <div class="col-md-12">

        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
<script>
    $(function () {
        var generateMosaic = function (id, random, tileWidth, tileHeight, colourBlended) {
            debugger;
            $.ajax({
                type: "POST",
                url: '@Url.Action("GenerateMosaic", "Generate")',
                dataType: 'json',
                cache: false,
                data: { id: id, random: random, tileWidth: tileWidth, tileHeight: tileHeight, colourBlended: colourBlended },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert("Invalid request");
                },
                success: function (response) {
                    im.src = response + "?rnd=" + Math.random();
                    newMosaicLocation = response;
                },
                complete: function () {
                    $('#generate_mosaic').attr("disabled", false);
                    $('#generate_random_mosaic').attr("disabled", false);
                    $('#colour_blended').attr("disabled", false);
                    $('#view_mosaic').attr("disabled", false);
                }
            });
        }

        var initialiseTileSize = function () {
            var firstOption = $('.dropdown-menu li:nth(0)')[0];
            var tileSizeButton = $(".tile-size-button");
            $(tileSizeButton).text("Tile Size : " + $(firstOption).text());
            $(tileSizeButton).val($(firstOption).text());
            setSeparation(parseInt($(firstOption).text()));
        }

        $("#generate_mosaic").click(function () {
            $(this).attr("disabled", true);
            $('#generate_random_mosaic').attr("disabled", true)
            var gridSize = getSeparation();
            var colourBlended = getColourBlended();
            generateMosaic("@Model.ProjectId", false, gridSize, gridSize, colourBlended);
        });

        $("#generate_random_mosaic").click(function () {
            $(this).attr("disabled", true);
            $('#generate_mosaic').attr("disabled", true)
            var gridSize = getSeparation();
            var colourBlended = getColourBlended();
            generateMosaic("@Model.ProjectId", true, gridSize, gridSize, colourBlended);
        });

        var getColourBlended = function () {
            var colourBlendedToggle = $('#colour_blended');
            var colourBlendedGeneration = false;
            if (colourBlendedToggle.is(":checked")) {
                colourBlendedGeneration = true;
            }
            colourBlendedToggle.attr("disabled", true);
            return colourBlendedGeneration;
        }

        $("#view_master").click(function () {
            im.src = "@Model.JSMasterLocation" + "?rnd=" + Math.random();
        });

        $("#view_mosaic").click(function () {
            im.src = "@Model.JSMosaicLocation" + "?rnd=" + Math.random();
        });

        $("#toggle_grid").click(function () {
            toggleGrid();
        });

        $(window).resize(function () {
            drawResize();
        });

        $(".dropdown-menu").on('click', 'li', function () {
            $(".btn:first-child").text("Tile Size : " + $(this).text());
            $(".btn:first-child").val($(this).text());
            setSeparation(parseInt($(this).text()));
            drawResize();
        });

        if ("@Model.State" == "@ProjectStructure.Types.State.Completed") {
            im.src = "@Model.JSMosaicLocation" + "?rnd=" + Math.random();
        }
        else {
            im.src = "@Model.JSMasterLocation" + "?rnd=" + Math.random();
            $('#view_mosaic').attr("disabled", true)
        }

        var newMosaicLocation = "";
        initialiseTileSize();
    });

</script>
