// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Project.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Project.proto</summary>
public static partial class ProjectReflection {

  #region Descriptor
  /// <summary>File descriptor for Project.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProjectReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1Qcm9qZWN0LnByb3RvIhwKDlByb2plY3RSZXF1ZXN0EgoKAmlkGAEgASgJ",
          "IkIKHlByb2plY3RJbnNlcnRTbWFsbEZpbGVzUmVxdWVzdBIKCgJpZBgBIAEo",
          "CRIUCgxTbWFsbEZpbGVJZHMYAiADKAkiQAodUHJvamVjdEluc2VydExhcmdl",
          "RmlsZVJlcXVlc3QSCgoCaWQYASABKAkSEwoLTGFyZ2VGaWxlSWQYAiABKAki",
          "PgoeUHJvamVjdEluc2VydE1vc2FpY0ZpbGVSZXF1ZXN0EgoKAmlkGAEgASgJ",
          "EhAKCExvY2F0aW9uGAIgASgJIoMCChBQcm9qZWN0U3RydWN0dXJlEgoKAmlk",
          "GAEgASgJEhYKDlRpbWVPZkNyZWF0aW9uGAIgASgJEhMKC0xhcmdlRmlsZUlk",
          "GAMgASgJEhQKDFNtYWxsRmlsZUlkcxgEIAMoCRIpCghQcm9ncmVzcxgFIAEo",
          "DjIXLlByb2plY3RTdHJ1Y3R1cmUuU3RhdGUSFgoOTW9zYWljTG9jYXRpb24Y",
          "BiABKAkiXQoFU3RhdGUSCwoHQ1JFQVRFRBAAEg4KClNNQUxMQURERUQQARIO",
          "CgpMQVJHRUFEREVEEAISDQoJQ09NUExFVEVEEAMSCwoHREVMRVRFRBAEEgsK",
          "B1VOS05PV04QBSJECg9Qcm9qZWN0UmVzcG9uc2USIgoHUHJvamVjdBgBIAEo",
          "CzIRLlByb2plY3RTdHJ1Y3R1cmUSDQoFRXJyb3IYAiABKAkiTQoXUHJvamVj",
          "dE11bHRpcGxlUmVzcG9uc2USIwoIUHJvamVjdHMYASADKAsyES5Qcm9qZWN0",
          "U3RydWN0dXJlEg0KBUVycm9yGAIgASgJYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectRequest), global::ProjectRequest.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectInsertSmallFilesRequest), global::ProjectInsertSmallFilesRequest.Parser, new[]{ "Id", "SmallFileIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectInsertLargeFileRequest), global::ProjectInsertLargeFileRequest.Parser, new[]{ "Id", "LargeFileId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectInsertMosaicFileRequest), global::ProjectInsertMosaicFileRequest.Parser, new[]{ "Id", "Location" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectStructure), global::ProjectStructure.Parser, new[]{ "Id", "TimeOfCreation", "LargeFileId", "SmallFileIds", "Progress", "MosaicLocation" }, null, new[]{ typeof(global::ProjectStructure.Types.State) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectResponse), global::ProjectResponse.Parser, new[]{ "Project", "Error" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProjectMultipleResponse), global::ProjectMultipleResponse.Parser, new[]{ "Projects", "Error" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ProjectRequest : pb::IMessage<ProjectRequest> {
  private static readonly pb::MessageParser<ProjectRequest> _parser = new pb::MessageParser<ProjectRequest>(() => new ProjectRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectRequest(ProjectRequest other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectRequest Clone() {
    return new ProjectRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ProjectInsertSmallFilesRequest : pb::IMessage<ProjectInsertSmallFilesRequest> {
  private static readonly pb::MessageParser<ProjectInsertSmallFilesRequest> _parser = new pb::MessageParser<ProjectInsertSmallFilesRequest>(() => new ProjectInsertSmallFilesRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectInsertSmallFilesRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertSmallFilesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertSmallFilesRequest(ProjectInsertSmallFilesRequest other) : this() {
    id_ = other.id_;
    smallFileIds_ = other.smallFileIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertSmallFilesRequest Clone() {
    return new ProjectInsertSmallFilesRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "SmallFileIds" field.</summary>
  public const int SmallFileIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<string> _repeated_smallFileIds_codec
      = pb::FieldCodec.ForString(18);
  private readonly pbc::RepeatedField<string> smallFileIds_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> SmallFileIds {
    get { return smallFileIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectInsertSmallFilesRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectInsertSmallFilesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!smallFileIds_.Equals(other.smallFileIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    hash ^= smallFileIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    smallFileIds_.WriteTo(output, _repeated_smallFileIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    size += smallFileIds_.CalculateSize(_repeated_smallFileIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectInsertSmallFilesRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    smallFileIds_.Add(other.smallFileIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          smallFileIds_.AddEntriesFrom(input, _repeated_smallFileIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ProjectInsertLargeFileRequest : pb::IMessage<ProjectInsertLargeFileRequest> {
  private static readonly pb::MessageParser<ProjectInsertLargeFileRequest> _parser = new pb::MessageParser<ProjectInsertLargeFileRequest>(() => new ProjectInsertLargeFileRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectInsertLargeFileRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertLargeFileRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertLargeFileRequest(ProjectInsertLargeFileRequest other) : this() {
    id_ = other.id_;
    largeFileId_ = other.largeFileId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertLargeFileRequest Clone() {
    return new ProjectInsertLargeFileRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "LargeFileId" field.</summary>
  public const int LargeFileIdFieldNumber = 2;
  private string largeFileId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LargeFileId {
    get { return largeFileId_; }
    set {
      largeFileId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectInsertLargeFileRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectInsertLargeFileRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (LargeFileId != other.LargeFileId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (LargeFileId.Length != 0) hash ^= LargeFileId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (LargeFileId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(LargeFileId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (LargeFileId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LargeFileId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectInsertLargeFileRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.LargeFileId.Length != 0) {
      LargeFileId = other.LargeFileId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          LargeFileId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ProjectInsertMosaicFileRequest : pb::IMessage<ProjectInsertMosaicFileRequest> {
  private static readonly pb::MessageParser<ProjectInsertMosaicFileRequest> _parser = new pb::MessageParser<ProjectInsertMosaicFileRequest>(() => new ProjectInsertMosaicFileRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectInsertMosaicFileRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertMosaicFileRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertMosaicFileRequest(ProjectInsertMosaicFileRequest other) : this() {
    id_ = other.id_;
    location_ = other.location_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectInsertMosaicFileRequest Clone() {
    return new ProjectInsertMosaicFileRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Location" field.</summary>
  public const int LocationFieldNumber = 2;
  private string location_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Location {
    get { return location_; }
    set {
      location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectInsertMosaicFileRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectInsertMosaicFileRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Location != other.Location) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Location.Length != 0) hash ^= Location.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Location.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Location);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Location.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectInsertMosaicFileRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Location.Length != 0) {
      Location = other.Location;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Location = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ProjectStructure : pb::IMessage<ProjectStructure> {
  private static readonly pb::MessageParser<ProjectStructure> _parser = new pb::MessageParser<ProjectStructure>(() => new ProjectStructure());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectStructure> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectStructure() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectStructure(ProjectStructure other) : this() {
    id_ = other.id_;
    timeOfCreation_ = other.timeOfCreation_;
    largeFileId_ = other.largeFileId_;
    smallFileIds_ = other.smallFileIds_.Clone();
    progress_ = other.progress_;
    mosaicLocation_ = other.mosaicLocation_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectStructure Clone() {
    return new ProjectStructure(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TimeOfCreation" field.</summary>
  public const int TimeOfCreationFieldNumber = 2;
  private string timeOfCreation_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TimeOfCreation {
    get { return timeOfCreation_; }
    set {
      timeOfCreation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "LargeFileId" field.</summary>
  public const int LargeFileIdFieldNumber = 3;
  private string largeFileId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LargeFileId {
    get { return largeFileId_; }
    set {
      largeFileId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "SmallFileIds" field.</summary>
  public const int SmallFileIdsFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_smallFileIds_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> smallFileIds_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> SmallFileIds {
    get { return smallFileIds_; }
  }

  /// <summary>Field number for the "Progress" field.</summary>
  public const int ProgressFieldNumber = 5;
  private global::ProjectStructure.Types.State progress_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProjectStructure.Types.State Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "MosaicLocation" field.</summary>
  public const int MosaicLocationFieldNumber = 6;
  private string mosaicLocation_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MosaicLocation {
    get { return mosaicLocation_; }
    set {
      mosaicLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectStructure);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectStructure other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (TimeOfCreation != other.TimeOfCreation) return false;
    if (LargeFileId != other.LargeFileId) return false;
    if(!smallFileIds_.Equals(other.smallFileIds_)) return false;
    if (Progress != other.Progress) return false;
    if (MosaicLocation != other.MosaicLocation) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (TimeOfCreation.Length != 0) hash ^= TimeOfCreation.GetHashCode();
    if (LargeFileId.Length != 0) hash ^= LargeFileId.GetHashCode();
    hash ^= smallFileIds_.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    if (MosaicLocation.Length != 0) hash ^= MosaicLocation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (TimeOfCreation.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TimeOfCreation);
    }
    if (LargeFileId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(LargeFileId);
    }
    smallFileIds_.WriteTo(output, _repeated_smallFileIds_codec);
    if (Progress != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Progress);
    }
    if (MosaicLocation.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(MosaicLocation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (TimeOfCreation.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeOfCreation);
    }
    if (LargeFileId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LargeFileId);
    }
    size += smallFileIds_.CalculateSize(_repeated_smallFileIds_codec);
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Progress);
    }
    if (MosaicLocation.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MosaicLocation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectStructure other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.TimeOfCreation.Length != 0) {
      TimeOfCreation = other.TimeOfCreation;
    }
    if (other.LargeFileId.Length != 0) {
      LargeFileId = other.LargeFileId;
    }
    smallFileIds_.Add(other.smallFileIds_);
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
    if (other.MosaicLocation.Length != 0) {
      MosaicLocation = other.MosaicLocation;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          TimeOfCreation = input.ReadString();
          break;
        }
        case 26: {
          LargeFileId = input.ReadString();
          break;
        }
        case 34: {
          smallFileIds_.AddEntriesFrom(input, _repeated_smallFileIds_codec);
          break;
        }
        case 40: {
          progress_ = (global::ProjectStructure.Types.State) input.ReadEnum();
          break;
        }
        case 50: {
          MosaicLocation = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ProjectStructure message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum State {
      [pbr::OriginalName("CREATED")] Created = 0,
      [pbr::OriginalName("SMALLADDED")] Smalladded = 1,
      [pbr::OriginalName("LARGEADDED")] Largeadded = 2,
      [pbr::OriginalName("COMPLETED")] Completed = 3,
      [pbr::OriginalName("DELETED")] Deleted = 4,
      [pbr::OriginalName("UNKNOWN")] Unknown = 5,
    }

  }
  #endregion

}

public sealed partial class ProjectResponse : pb::IMessage<ProjectResponse> {
  private static readonly pb::MessageParser<ProjectResponse> _parser = new pb::MessageParser<ProjectResponse>(() => new ProjectResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectResponse(ProjectResponse other) : this() {
    project_ = other.project_ != null ? other.project_.Clone() : null;
    error_ = other.error_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectResponse Clone() {
    return new ProjectResponse(this);
  }

  /// <summary>Field number for the "Project" field.</summary>
  public const int ProjectFieldNumber = 1;
  private global::ProjectStructure project_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProjectStructure Project {
    get { return project_; }
    set {
      project_ = value;
    }
  }

  /// <summary>Field number for the "Error" field.</summary>
  public const int ErrorFieldNumber = 2;
  private string error_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Error {
    get { return error_; }
    set {
      error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Project, other.Project)) return false;
    if (Error != other.Error) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (project_ != null) hash ^= Project.GetHashCode();
    if (Error.Length != 0) hash ^= Error.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (project_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Project);
    }
    if (Error.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Error);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (project_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Project);
    }
    if (Error.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectResponse other) {
    if (other == null) {
      return;
    }
    if (other.project_ != null) {
      if (project_ == null) {
        project_ = new global::ProjectStructure();
      }
      Project.MergeFrom(other.Project);
    }
    if (other.Error.Length != 0) {
      Error = other.Error;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (project_ == null) {
            project_ = new global::ProjectStructure();
          }
          input.ReadMessage(project_);
          break;
        }
        case 18: {
          Error = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ProjectMultipleResponse : pb::IMessage<ProjectMultipleResponse> {
  private static readonly pb::MessageParser<ProjectMultipleResponse> _parser = new pb::MessageParser<ProjectMultipleResponse>(() => new ProjectMultipleResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProjectMultipleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProjectReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectMultipleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectMultipleResponse(ProjectMultipleResponse other) : this() {
    projects_ = other.projects_.Clone();
    error_ = other.error_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProjectMultipleResponse Clone() {
    return new ProjectMultipleResponse(this);
  }

  /// <summary>Field number for the "Projects" field.</summary>
  public const int ProjectsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ProjectStructure> _repeated_projects_codec
      = pb::FieldCodec.ForMessage(10, global::ProjectStructure.Parser);
  private readonly pbc::RepeatedField<global::ProjectStructure> projects_ = new pbc::RepeatedField<global::ProjectStructure>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProjectStructure> Projects {
    get { return projects_; }
  }

  /// <summary>Field number for the "Error" field.</summary>
  public const int ErrorFieldNumber = 2;
  private string error_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Error {
    get { return error_; }
    set {
      error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProjectMultipleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProjectMultipleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!projects_.Equals(other.projects_)) return false;
    if (Error != other.Error) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= projects_.GetHashCode();
    if (Error.Length != 0) hash ^= Error.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    projects_.WriteTo(output, _repeated_projects_codec);
    if (Error.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Error);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += projects_.CalculateSize(_repeated_projects_codec);
    if (Error.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProjectMultipleResponse other) {
    if (other == null) {
      return;
    }
    projects_.Add(other.projects_);
    if (other.Error.Length != 0) {
      Error = other.Error;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          projects_.AddEntriesFrom(input, _repeated_projects_codec);
          break;
        }
        case 18: {
          Error = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
